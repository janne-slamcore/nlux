{"version":3,"file":"hf-react.js","sources":["../../../../packages/shared/src/utils/debug.ts","../../../../packages/shared/src/types/error.ts","../../../../packages/react/hf/src/hooks/getAdapterBuilder.ts","../../../../packages/react/hf/src/hooks/useChatAdapter.ts"],"sourcesContent":["export const debug = (...messages: unknown[]) => {\n    if (process.env.NLUX_DEBUG_ENABLED !== 'true') {\n        return;\n    }\n\n    for (const message of messages) {\n        if (typeof message === 'string') {\n            console.log(`[nlux] ${message}`);\n            continue;\n        }\n\n        if (message && typeof message.toString === 'function') {\n            console.log(`[nlux] ${message.toString()}`);\n            continue;\n        }\n\n        console.log('[nlux] Debug:');\n        console.log(JSON.stringify(message, null, 2));\n    }\n};\n","import {NLErrorId} from './exceptions/errors';\n\nexport type NluxRawError = {\n    readonly message?: string;\n    readonly type?: string;\n    readonly source?: string;\n    readonly exceptionId?: NLErrorId;\n};\n\nexport class NluxError extends Error {\n    readonly exceptionId?: NLErrorId;\n    readonly message: string;\n    readonly source?: string;\n    readonly type: string;\n\n    constructor(rawError: NluxRawError = {}) {\n        super(rawError.message);\n\n        this.message = rawError.message ?? '';\n        this.source = rawError.source;\n        this.type = this.constructor.name;\n        this.exceptionId = rawError.exceptionId;\n    }\n}\n\nexport class NluxUsageError extends NluxError {\n}\n\nexport class NluxValidationError extends NluxError {\n}\n\nexport class NluxRenderingError extends NluxError {\n}\n","import {ChatAdapterBuilder, ChatAdapterOptions, createChatAdapter} from '@nlux/hf';\nimport {NluxUsageError} from '@shared/types/error';\n\nconst source = 'hooks/getAdapterBuilder';\n\nexport const getAdapterBuilder = <AiMsg>(\n    options: ChatAdapterOptions<AiMsg>,\n): ChatAdapterBuilder<AiMsg> => {\n    const {\n        model,\n        authToken,\n        dataTransferMode,\n        preProcessors,\n        maxNewTokens,\n        systemMessage,\n    } = options || {};\n\n    if (dataTransferMode && dataTransferMode !== 'stream' && dataTransferMode !== 'batch') {\n        throw new NluxUsageError({\n            source,\n            message: 'Data transfer mode for Hugging Face Inference API must be either \"stream\" or \"batch\"',\n        });\n    }\n\n    if (model === undefined) {\n        throw new NluxUsageError({\n            source,\n            message: 'You must provide either a model or an endpoint to use Hugging Face Inference API.',\n        });\n    }\n\n    let newAdapter = createChatAdapter<AiMsg>().withModel(model);\n\n    if (authToken !== undefined) {\n        newAdapter = newAdapter.withAuthToken(authToken);\n    }\n\n    if (dataTransferMode !== undefined) {\n        newAdapter = newAdapter.withDataTransferMode(dataTransferMode);\n    }\n\n    if (preProcessors?.input !== undefined) {\n        newAdapter = newAdapter.withInputPreProcessor(preProcessors.input);\n    }\n\n    if (preProcessors?.output !== undefined) {\n        newAdapter = newAdapter.withOutputPreProcessor(preProcessors?.output);\n    }\n\n    if (systemMessage !== undefined) {\n        newAdapter = newAdapter.withSystemMessage(systemMessage);\n    }\n\n    if (maxNewTokens !== undefined) {\n        newAdapter = newAdapter.withMaxNewTokens(maxNewTokens);\n    }\n\n    return newAdapter;\n};\n","import {ChatAdapterOptions, StandardChatAdapter} from '@nlux/hf';\nimport {debug} from '@shared/utils/debug';\nimport {useEffect, useState} from 'react';\nimport {getAdapterBuilder} from './getAdapterBuilder';\n\nconst source = 'hooks/useChatAdapter';\n\nexport const useChatAdapter = <AiMsg = string>(\n    options: ChatAdapterOptions<AiMsg>,\n): StandardChatAdapter<AiMsg> => {\n    if (!options.model) {\n        throw new Error('You must provide either a model or an endpoint to use Hugging Face Inference API.');\n    }\n\n    const [isInitialized, setIsInitialized] = useState(false);\n    const [adapter] = useState<StandardChatAdapter<AiMsg>>(\n        getAdapterBuilder<AiMsg>(options).create(),\n    );\n\n    const {\n        authToken,\n        dataTransferMode,\n        model,\n        systemMessage,\n        preProcessors: {\n            input: inputPreProcessor = undefined,\n            output: outputPreProcessor = undefined,\n        } = {},\n        maxNewTokens,\n    } = options || {};\n\n    useEffect(() => {\n        if (!isInitialized) {\n            setIsInitialized(true);\n            return;\n        }\n\n        debug({\n            source,\n            message: 'A new parameter has changed in useChatAdapter(). Adapter cannot be changed after ' +\n                'initialization and the new parameter will not be applied. Please re-initialize the adapter ' +\n                'with the new parameter. or user adapter methods to change the options and behaviour of ' +\n                'the adapter.',\n        });\n    }, [\n        authToken,\n        dataTransferMode,\n        model,\n        systemMessage,\n        inputPreProcessor,\n        outputPreProcessor,\n        maxNewTokens,\n    ]);\n\n    return adapter;\n};\n"],"names":["source"],"mappings":"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"}