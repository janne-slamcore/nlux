{"version":3,"file":"langchain.js","sources":["../../../../packages/shared/src/types/error.ts","../../../../packages/shared/src/utils/uid.ts","../../../../packages/shared/src/utils/warn.ts","../../../../packages/js/langchain/src/langserve/utils/getDataTransferModeFromEndpointType.ts","../../../../packages/js/langchain/src/langserve/utils/getEndpointTypeFromUrl.ts","../../../../packages/js/langchain/src/langserve/utils/getDataTransferModeToUse.ts","../../../../packages/js/langchain/src/langserve/utils/isUrlWithSupportedEndpoint.ts","../../../../packages/js/langchain/src/langserve/utils/getBaseUrlFromUrlOption.ts","../../../../packages/js/langchain/src/langserve/utils/getEndpointTypeToUse.ts","../../../../packages/js/langchain/src/langserve/utils/getEndpointUrlToUse.ts","../../../../packages/js/langchain/src/langserve/utils/getHeadersToUse.ts","../../../../packages/js/langchain/src/langserve/utils/getRunnableNameToUse.ts","../../../../packages/js/langchain/src/langserve/utils/getSchemaUrlToUse.ts","../../../../packages/js/langchain/src/langserve/utils/transformInputBasedOnSchema.ts","../../../../packages/js/langchain/src/langserve/adapter/adapter.ts","../../../../packages/js/langchain/src/langserve/adapter/batch.ts","../../../../packages/shared/src/utils/debug.ts","../../../../packages/js/langchain/src/langserve/parser/parseStreamedEvent.ts","../../../../packages/js/langchain/src/langserve/parser/parseChunk.ts","../../../../packages/js/langchain/src/langserve/utils/adapterErrorToExceptionId.ts","../../../../packages/js/langchain/src/langserve/adapter/stream.ts","../../../../packages/js/langchain/src/langserve/builder/builderImpl.ts","../../../../packages/js/langchain/src/langserve/builder/createChatAdapter.ts"],"sourcesContent":["import {NLErrorId} from './exceptions/errors';\n\nexport type NluxRawError = {\n    readonly message?: string;\n    readonly type?: string;\n    readonly source?: string;\n    readonly exceptionId?: NLErrorId;\n};\n\nexport class NluxError extends Error {\n    readonly exceptionId?: NLErrorId;\n    readonly message: string;\n    readonly source?: string;\n    readonly type: string;\n\n    constructor(rawError: NluxRawError = {}) {\n        super(rawError.message);\n\n        this.message = rawError.message ?? '';\n        this.source = rawError.source;\n        this.type = this.constructor.name;\n        this.exceptionId = rawError.exceptionId;\n    }\n}\n\nexport class NluxUsageError extends NluxError {\n}\n\nexport class NluxValidationError extends NluxError {\n}\n\nexport class NluxRenderingError extends NluxError {\n}\n","export const uid = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (character) => {\n        const randomValue = Math.random() * 16 | 0;\n        const value = character == 'x' ? randomValue : (randomValue & 0x3 | 0x8);\n        return value.toString(16);\n    });\n};\n","export const warn = (message: unknown) => {\n    if (typeof message === 'string') {\n        console.warn(`[nlux] ${message}`);\n        return;\n    }\n\n    if (message && typeof message.toString === 'function') {\n        console.warn(`[nlux] ${message.toString()}`);\n        return;\n    }\n\n    console.warn('[nlux]');\n    console.log(JSON.stringify(message, null, 2));\n};\n\nconst warnedMessages: string[] = [];\nexport const warnOnce = (message: string) => {\n    if (warnedMessages.includes(message)) {\n        return;\n    }\n\n    warnedMessages.push(message);\n    warn(message);\n};\n","import {DataTransferMode} from '@nlux/core';\nimport {LangServeEndpointType} from '../types/langServe';\n\nexport const getDataTransferModeFromEndpointType = (\n    endpointAction: LangServeEndpointType,\n): DataTransferMode => {\n    if (endpointAction === 'stream') {\n        return 'stream';\n    }\n\n    return 'batch';\n};\n","import {LangServeEndpointType} from '../types/langServe';\n\nexport const getEndpointTypeFromUrl = (url: string): LangServeEndpointType | undefined => {\n    const regEx = /\\/.*\\/(invoke|stream)$/g;\n    const match = regEx.exec(url);\n    if (!match || match.length < 2) {\n        return undefined;\n    }\n\n    const extractedEndpoint = match[1];\n    if (extractedEndpoint === 'invoke' || extractedEndpoint === 'stream') {\n        return extractedEndpoint;\n    }\n\n    return undefined;\n};\n","import {DataTransferMode} from '@nlux/core';\nimport {warnOnce} from '@shared/utils/warn';\nimport {LangServeAbstractAdapter} from '../adapter/adapter';\nimport {ChatAdapterOptions} from '../types/adapterOptions';\nimport {getDataTransferModeFromEndpointType} from './getDataTransferModeFromEndpointType';\nimport {getEndpointTypeFromUrl} from './getEndpointTypeFromUrl';\n\nexport const getDataTransferModeToUse = <AiMsg>(adapterOptions: ChatAdapterOptions<AiMsg>): DataTransferMode => {\n    const runnableEndpointAction = getEndpointTypeFromUrl(\n        adapterOptions.url,\n    );\n\n    const dataTransferModeFromOptions = adapterOptions.dataTransferMode;\n    const dataTransferModeFromAction = runnableEndpointAction\n        ? getDataTransferModeFromEndpointType(runnableEndpointAction)\n        : undefined;\n\n    const dataTransferMode = dataTransferModeFromAction ?? (\n        adapterOptions.dataTransferMode ?? LangServeAbstractAdapter.defaultDataTransferMode\n    );\n\n    if (\n        dataTransferModeFromOptions\n        && dataTransferModeFromAction\n        && dataTransferModeFromOptions !== dataTransferModeFromAction\n    ) {\n        warnOnce(`The data transfer mode provided to LangServe adapter does not match the LangServe runnable ` +\n            `URL action. When you provide a runnable URL that ends with '/${runnableEndpointAction}', ` +\n            `the data transfer mode is automatically set to '${dataTransferModeFromAction}' and ` +\n            `the 'dataTransferMode' option should not be provided or should be set ` +\n            `to '${dataTransferModeFromAction}'`);\n    }\n\n    return dataTransferMode;\n};\n","export const isUrlWithSupportedEndpoint = (url: string) => {\n    const regEx = /\\/.*\\/(invoke|stream)$/g;\n    return regEx.test(url);\n};\n","import {ChatAdapterOptions} from '../types/adapterOptions';\nimport {isUrlWithSupportedEndpoint} from './isUrlWithSupportedEndpoint';\n\n/**\n * When the URL provided by the user does not end with /invoke or /stream we assume that the user has provided\n * the base URL. When the URL provided does end with /invoke or /stream, we assume that the user has provided the\n * endpoint URL, and we strip the endpoint type from it.\n *\n * Examples:\n *\n * For the URL: https://pynlux.api.nlkit.com/einbot/stream\n * The base URL is: https://pynlux.api.nlkit.com/einbot\n *\n * For the URL: https://pynlux.api.nlkit.com/einbot\n * The base URL is also: https://pynlux.api.nlkit.com/einbot\n * Since it does not end with /invoke or /stream.\n */\nexport const getBaseUrlFromUrlOption = <AnyAiMsg>(adapterOptions: ChatAdapterOptions<AnyAiMsg>): string => {\n    const urlOption = adapterOptions.url;\n    if (!isUrlWithSupportedEndpoint(urlOption)) {\n        return urlOption;\n    }\n\n    return urlOption.replace(/\\/(invoke|stream)$/g, '');\n};\n","import {ChatAdapterOptions} from '../types/adapterOptions';\nimport {LangServeEndpointType} from '../types/langServe';\nimport {getDataTransferModeToUse} from './getDataTransferModeToUse';\nimport {getEndpointTypeFromUrl} from './getEndpointTypeFromUrl';\n\nexport const getEndpointTypeToUse = <AiMsg>(\n    adapterOptions: ChatAdapterOptions<AiMsg>,\n): LangServeEndpointType => {\n    const urlFromOptions = adapterOptions.url;\n    const actionFromUrl = getEndpointTypeFromUrl(urlFromOptions);\n    if (actionFromUrl) {\n        return actionFromUrl;\n    }\n\n    const dataTransferMode = getDataTransferModeToUse(adapterOptions);\n    return dataTransferMode === 'batch' ? 'invoke' : 'stream';\n};\n","import {ChatAdapterOptions} from '../types/adapterOptions';\nimport {getBaseUrlFromUrlOption} from './getBaseUrlFromUrlOption';\nimport {getEndpointTypeToUse} from './getEndpointTypeToUse';\n\nexport const getEndpointUrlToUse = <AnyAiMsg>(\n    adapterOptions: ChatAdapterOptions<AnyAiMsg>,\n): string => {\n    const baseUrl = getBaseUrlFromUrlOption(adapterOptions).replace(/\\/$/, '');\n    const endpointType = getEndpointTypeToUse(adapterOptions);\n    return `${baseUrl}/${endpointType}`;\n};\n","import {ChatAdapterOptions} from '../types/adapterOptions';\nimport {LangServeHeaders} from '../types/langServe';\n\nexport const getHeadersToUse = <AnyAiMsg>(\n    adapterOptions: ChatAdapterOptions<AnyAiMsg>,\n): LangServeHeaders => {\n    return adapterOptions.headers || {};\n};","import {ChatAdapterOptions} from '../types/adapterOptions';\nimport {getBaseUrlFromUrlOption} from './getBaseUrlFromUrlOption';\n\nexport const getRunnableNameToUse = <AnyAiMsg>(adapterOptions: ChatAdapterOptions<AnyAiMsg>): string => {\n    const baseUrl = getBaseUrlFromUrlOption(adapterOptions).replace(/\\/$/, '');\n    const runnableName = baseUrl.split('/').pop();\n    return runnableName || 'langserve-runnable';\n};\n","import {ChatAdapterOptions} from '../types/adapterOptions';\nimport {getBaseUrlFromUrlOption} from './getBaseUrlFromUrlOption';\n\nexport const getSchemaUrlToUse = <AnyAiMsg>(\n    adapterOptions: ChatAdapterOptions<AnyAiMsg>,\n    type: 'input' | 'output',\n): string => {\n    const baseUrl = getBaseUrlFromUrlOption(adapterOptions).replace(/\\/$/, '');\n    if (type === 'input') {\n        return `${baseUrl}/input_schema`;\n    }\n\n    return `${baseUrl}/output_schema`;\n};\n","import {ChatItem} from '@nlux/core';\nimport {warn} from '@shared/utils/warn';\n\nexport const transformInputBasedOnSchema = <AiMsg>(\n    message: string,\n    conversationHistory: ChatItem<AiMsg>[] | undefined,\n    schema: unknown,\n    runnableName: string,\n): unknown | undefined => {\n    // TODO - Attempt to include conversation history in the input\n    //   if the schema allows it.\n\n    const typedSchema = schema as Record<string, unknown> | undefined;\n    if (!typedSchema || typeof typedSchema.properties !== 'object') {\n        return message;\n    }\n\n    if (typeof typedSchema !== 'object' || !typedSchema) {\n        warn(\n            `LangServer adapter cannot process the input schema fetched for runnable \"${runnableName}\". ` +\n            'The user message will be sent to LangServe endpoint as is without transformations. ' +\n            `To override this behavior, you can either set the \"useInputSchema\" option to false, ` +\n            `or provide a custom input pre-processor via the \"inputPreProcessor\" option, ` +\n            `or update your endpoint and input schema to have an object with a single ` +\n            `string property or a string as input.`,\n        );\n\n        return message;\n    }\n\n    if (typedSchema.type === 'string') {\n        return message;\n    }\n\n    if (typedSchema.type === 'object') {\n        const properties: Record<string, unknown> = (\n            typeof typedSchema.properties === 'object' && typedSchema.properties\n        )\n            ? typedSchema.properties as Record<string, unknown>\n            : {};\n\n        const schemaStringProps = Object\n            .keys(properties)\n            .filter((key) => key && typeof (properties[key] as Record<string, unknown>).type === 'string')\n            .map((key) => key);\n\n        if (schemaStringProps.length !== 1) {\n            warn(\n                `LangServer adapter cannot find a valid property to match to user input inside ` +\n                'the \"${runnableName}\" input schema. The user message will be sent to LangServe endpoint as ' +\n                `is without transformations. To override this behavior, you can either set the \"useInputSchema\" ` +\n                `option to false, or provide a custom input pre-processor via the \"inputPreProcessor\" option, ` +\n                `or update your endpoint and input schema to have an object with a single ` +\n                `string property or a string accepted as part of input schema.`,\n            );\n        } else {\n            const propToUse = schemaStringProps[0];\n            return ({\n                [propToUse]: message,\n            });\n        }\n    }\n\n    return undefined;\n};\n","import {\n    ChatAdapterExtras,\n    ChatItem,\n    DataTransferMode,\n    StandardAdapterInfo,\n    StandardChatAdapter,\n    StreamingAdapterObserver,\n} from '@nlux/core';\nimport {uid} from '@shared/utils/uid';\nimport {warn} from '@shared/utils/warn';\nimport {ChatAdapterOptions} from '../types/adapterOptions';\nimport {LangServeInputPreProcessor} from '../types/inputPreProcessor';\nimport {LangServeConfig, LangServeHeaders} from '../types/langServe';\nimport {LangServeOutputPreProcessor} from '../types/outputPreProcessor';\nimport {getDataTransferModeToUse} from '../utils/getDataTransferModeToUse';\nimport {getEndpointUrlToUse} from '../utils/getEndpointUrlToUse';\nimport {getHeadersToUse} from '../utils/getHeadersToUse';\nimport {getRunnableNameToUse} from '../utils/getRunnableNameToUse';\nimport {getSchemaUrlToUse} from '../utils/getSchemaUrlToUse';\nimport {transformInputBasedOnSchema} from '../utils/transformInputBasedOnSchema';\n\nexport abstract class LangServeAbstractAdapter<AiMsg> implements StandardChatAdapter<AiMsg> {\n    static defaultDataTransferMode: DataTransferMode = 'stream';\n\n    private readonly __instanceId: string;\n    private readonly __options: ChatAdapterOptions<AiMsg>;\n\n    private readonly theDataTransferModeToUse: DataTransferMode;\n    private readonly theEndpointUrlToUse: string;\n    private readonly theHeadersToUse: LangServeHeaders;\n    private theInputSchemaToUse: object | undefined;\n    private readonly theInputSchemaUrlToUse: string;\n    private readonly theRunnableNameToUse: string;\n    private readonly theUseInputSchemaOptionToUse: boolean;\n\n    protected constructor(options: ChatAdapterOptions<AiMsg>) {\n        this.__instanceId = `${this.info.id}-${uid()}`;\n        this.__options = {...options};\n\n        this.theDataTransferModeToUse = getDataTransferModeToUse(options);\n        this.theHeadersToUse = getHeadersToUse(options);\n        this.theUseInputSchemaOptionToUse = (typeof options.useInputSchema === 'boolean')\n            ? options.useInputSchema\n            : true;\n\n        this.theEndpointUrlToUse = getEndpointUrlToUse(options);\n        this.theRunnableNameToUse = getRunnableNameToUse(options);\n        this.theInputSchemaUrlToUse = getSchemaUrlToUse(options, 'input');\n\n        this.init();\n    }\n\n    get dataTransferMode(): DataTransferMode {\n        return this.theDataTransferModeToUse;\n    }\n\n    get endpointUrl(): string {\n        return this.theEndpointUrlToUse;\n    }\n\n    get headers(): LangServeHeaders {\n        return this.theHeadersToUse;\n    }\n\n    get id(): string {\n        return this.__instanceId;\n    }\n\n    get info(): StandardAdapterInfo {\n        return {\n            id: 'langserve-adapter',\n            capabilities: {\n                chat: true,\n                fileUpload: false,\n                textToSpeech: false,\n                speechToText: false,\n            },\n        };\n    }\n\n    get inputPreProcessor(): LangServeInputPreProcessor<AiMsg> | undefined {\n        return this.__options.inputPreProcessor;\n    }\n\n    get inputSchema(): Readonly<object> | undefined {\n        return this.theInputSchemaToUse;\n    }\n\n    get outputPreProcessor(): LangServeOutputPreProcessor<AiMsg> | undefined {\n        return this.__options.outputPreProcessor;\n    }\n\n    get runnableName(): string {\n        return this.theRunnableNameToUse;\n    }\n\n    get useInputSchema(): boolean {\n        return this.theUseInputSchemaOptionToUse;\n    }\n\n    protected get config(): LangServeConfig | undefined {\n        return this.__options.config;\n    }\n\n    private get inputSchemaUrl(): string {\n        return this.theInputSchemaUrlToUse;\n    }\n\n    abstract batchText(message: string, extras: ChatAdapterExtras<AiMsg>): Promise<string | object | undefined>;\n\n    async fetchSchema(url: string): Promise<object | undefined> {\n        try {\n            const response = await fetch(url);\n            const result = await response.json();\n            if (typeof result !== 'object' || !result) {\n                warn(`LangServe adapter is unable process schema loaded from: ${url}`);\n                return undefined;\n            }\n\n            return result;\n        } catch (_error) {\n            warn(`LangServe adapter is unable to fetch schema from: ${url}`);\n            return undefined;\n        }\n    }\n\n    init() {\n        if (this.useInputSchema) {\n            this.fetchSchema(this.inputSchemaUrl).then((schema) => {\n                this.theInputSchemaToUse = schema;\n            });\n        }\n    }\n\n    preProcessAiBatchedMessage(\n        message: string | object | undefined,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): AiMsg | undefined {\n        if (this.outputPreProcessor) {\n            return this.outputPreProcessor(message);\n        }\n\n        if (typeof message === 'string') {\n            return message as AiMsg;\n        }\n\n        const content = (message as Record<string, unknown>)?.content;\n        if (typeof content === 'string') {\n            return content as AiMsg;\n        }\n\n        warn(\n            'LangServe adapter is unable to process the response from the runnable. Returning empty string. ' +\n            'You may want to implement an output pre-processor to handle custom responses.',\n        );\n\n        return undefined;\n    }\n\n    preProcessAiStreamedChunk(\n        chunk: string | object | undefined,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): AiMsg | undefined {\n        if (this.outputPreProcessor) {\n            return this.outputPreProcessor(chunk);\n        }\n\n        if (typeof chunk === 'string') {\n            return chunk as AiMsg;\n        }\n\n        const content = (chunk as Record<string, unknown>)?.content;\n        if (typeof content === 'string') {\n            return content as AiMsg;\n        }\n\n        warn(\n            'LangServe adapter is unable to process the chunk from the runnable. Returning empty string. ' +\n            'You may want to implement an output pre-processor to handle chunks of custom responses.',\n        );\n\n        return undefined;\n    }\n\n    abstract streamText(\n        message: string,\n        observer: StreamingAdapterObserver<string | object | undefined>,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): void;\n\n    protected getRequestBody(\n        message: string,\n        config?: Record<string, unknown>,\n        conversationHistory?: ChatItem<AiMsg>[],\n    ): string {\n        if (this.inputPreProcessor) {\n            const preProcessedInput = this.inputPreProcessor(message, conversationHistory);\n            return JSON.stringify({\n                input: preProcessedInput,\n                config,\n            });\n        }\n\n        if (this.inputSchema) {\n            const body = transformInputBasedOnSchema(message, conversationHistory, this.inputSchema, this.runnableName);\n            if (typeof body !== 'undefined') {\n                return JSON.stringify({\n                    input: body,\n                    config,\n                });\n            }\n        }\n\n        // By default, we send the message as is\n        return JSON.stringify({\n            input: message,\n            config,\n        });\n    }\n}\n","import {ChatAdapterExtras, StreamingAdapterObserver} from '@nlux/core';\nimport {NluxUsageError} from '@shared/types/error';\nimport {ChatAdapterOptions} from '../types/adapterOptions';\nimport {LangServeAbstractAdapter} from './adapter';\n\nexport class LangServeBatchAdapter<AiMsg = string> extends LangServeAbstractAdapter<AiMsg> {\n    constructor(options: ChatAdapterOptions<AiMsg>) {\n        super(options);\n    }\n\n    async batchText(message: string, extras: ChatAdapterExtras<AiMsg>): Promise<string | object | undefined> {\n        const body = this.getRequestBody(\n            message,\n            this.config,\n            extras.conversationHistory,\n        );\n\n        const response = await fetch(this.endpointUrl, {\n            method: 'POST',\n            headers: {\n                ...this.headers,\n                'Content-Type': 'application/json',\n            },\n            body,\n        });\n\n        if (!response.ok) {\n            throw new Error(`LangServe runnable returned status code: ${response.status}`);\n        }\n\n        const result = await response.json();\n        if (typeof result !== 'object' || !result || result.output === undefined) {\n            throw new Error(\n                'Invalid response from LangServe runnable: Response is not an object ' +\n                'or does not contain an \"output\" property',\n            );\n        }\n\n        return (typeof result === 'object' && result) ? result.output : undefined;\n    }\n\n    streamText(message: string, observer: StreamingAdapterObserver, extras: ChatAdapterExtras<AiMsg>): void {\n        throw new NluxUsageError({\n            source: this.constructor.name,\n            message: 'Cannot stream text from the batch adapter!',\n        });\n    }\n}\n","export const debug = (...messages: unknown[]) => {\n    if (process.env.NLUX_DEBUG_ENABLED !== 'true') {\n        return;\n    }\n\n    for (const message of messages) {\n        if (typeof message === 'string') {\n            console.log(`[nlux] ${message}`);\n            continue;\n        }\n\n        if (message && typeof message.toString === 'function') {\n            console.log(`[nlux] ${message.toString()}`);\n            continue;\n        }\n\n        console.log('[nlux] Debug:');\n        console.log(JSON.stringify(message, null, 2));\n    }\n};\n","import {debug} from '@shared/utils/debug';\nimport {warn} from '@shared/utils/warn';\n\nexport const parseStreamedEvent = (event: string): {\n    event: 'data' | 'end';\n    data: unknown;\n} | undefined => {\n    const regEx = /^event:\\s+(?<event>[\\w]+)((\\r?)\\n(\\r?)data: (?<data>(.|\\n)*))?/gm;\n    const match = regEx.exec(event);\n    if (!match) {\n        return undefined;\n    }\n\n    const {event: eventName, data: rawData} = match.groups || {};\n    if (!eventName) {\n        return undefined;\n    }\n\n    if (eventName !== 'data' && eventName !== 'end') {\n        debug(`LangServe stream adapter received unsupported event \"${eventName}\"`);\n        return undefined;\n    }\n\n    try {\n        const data = rawData ? JSON.parse(rawData) : undefined;\n        return {event: eventName, data};\n    } catch (_error) {\n        warn(`LangServe stream adapter failed to parse data for chunk event \"${eventName}\" | Data: ${rawData}`);\n        return {event: eventName, data: undefined};\n    }\n};\n","import {parseStreamedEvent} from './parseStreamedEvent';\n\nexport const parseChunk = (chunk: string): Array<{\n    event: 'data' | 'end';\n    data: unknown;\n}> | Error => {\n    if (!chunk) {\n        return [];\n    }\n\n    // Extract the line that contains the event name\n    const regEx = /(((?<=^)|(?<=\\n))event:\\s+(\\w+))/g;\n    const eventStartPositions: number[] = [];\n    let match = regEx.exec(chunk);\n    while (match) {\n        eventStartPositions.push(match.index);\n        match = regEx.exec(chunk);\n    }\n\n    const extractEvent = (startPosition: number, index: number) => {\n        const endPosition = eventStartPositions[index + 1] || chunk.length;\n        return chunk.substring(startPosition, endPosition);\n    };\n\n    try {\n        return eventStartPositions\n            .map(extractEvent)\n            .map(parseStreamedEvent)\n            .filter(event => event !== undefined)\n            .map(event => event!);\n    } catch (_error) {\n        if (_error instanceof Error) {\n            return _error;\n        }\n\n        // When no error is thrown, we return empty result\n        return [];\n    }\n};\n","import {NLErrorId} from '@shared/types/exceptions/errors';\n\nexport const adapterErrorToExceptionId = (error: unknown): NLErrorId | null => {\n    if (typeof error === 'object' && error !== null) {\n        const errorAsObject = error as Record<string, unknown>;\n        if (\n            errorAsObject.message && typeof errorAsObject.message === 'string' &&\n            errorAsObject.message.toLowerCase().includes('connection error')\n        ) {\n            return 'connection-error';\n        }\n    }\n\n    return null;\n};\n","import {ChatAdapterExtras, StreamingAdapterObserver} from '@nlux/core';\nimport {NluxError, NluxUsageError} from '@shared/types/error';\nimport {warn} from '@shared/utils/warn';\nimport {parseChunk} from '../parser/parseChunk';\nimport {ChatAdapterOptions} from '../types/adapterOptions';\nimport {adapterErrorToExceptionId} from '../utils/adapterErrorToExceptionId';\nimport {LangServeAbstractAdapter} from './adapter';\n\nexport class LangServeStreamAdapter<AiMsg> extends LangServeAbstractAdapter<AiMsg> {\n    constructor(options: ChatAdapterOptions<AiMsg>) {\n        super(options);\n    }\n\n    async batchText(message: string, extras: ChatAdapterExtras<AiMsg>): Promise<string | object | undefined> {\n        throw new NluxUsageError({\n            source: this.constructor.name,\n            message: 'Cannot fetch text using the stream adapter!',\n        });\n    }\n\n    streamText(\n        message: string,\n        observer: StreamingAdapterObserver<string | object | undefined>,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): void {\n        const body = this.getRequestBody(\n            message,\n            this.config,\n            extras.conversationHistory,\n        );\n\n        fetch(this.endpointUrl, {\n            method: 'POST',\n            headers: {\n                ...this.headers,\n                'Content-Type': 'application/json',\n            },\n            body,\n        })\n            .then(async (response) => {\n                if (!response.ok) {\n                    throw new NluxError({\n                        source: this.constructor.name,\n                        message: `LangServe runnable returned status code: ${response.status}`,\n                    });\n                }\n\n                if (!response.body) {\n                    throw new NluxError({\n                        source: this.constructor.name,\n                        message: `LangServe runnable returned status code: ${response.status}`,\n                    });\n                }\n\n                // Read a stream of server-sent events\n                // and feed them to the observer as they are being generated\n                const reader = response.body.getReader();\n                const textDecoder = new TextDecoder();\n                let doneReading = false;\n\n                while (!doneReading) {\n                    const {value, done} = await reader.read();\n                    if (done) {\n                        doneReading = true;\n                        break;\n                    }\n\n                    const chunk = textDecoder.decode(value);\n                    const chunkContent = parseChunk(chunk);\n                    if (Array.isArray(chunkContent)) {\n                        for (const aiEvent of chunkContent) {\n                            if (aiEvent.event === 'data' && aiEvent.data !== undefined) {\n                                observer.next(aiEvent.data as string | object | undefined);\n                            }\n\n                            if (aiEvent.event === 'end') {\n                                observer.complete();\n                                doneReading = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (chunkContent instanceof Error) {\n                        warn(chunkContent);\n                        observer.error(chunkContent);\n                        doneReading = true;\n                    }\n                }\n            })\n            .catch((error) => {\n                warn(error);\n                observer.error(new NluxUsageError({\n                    source: this.constructor.name,\n                    message: error.message,\n                    exceptionId: adapterErrorToExceptionId(error) ?? undefined,\n                }));\n            });\n    }\n}\n","import {DataTransferMode} from '@nlux/core';\nimport {NluxUsageError} from '@shared/types/error';\nimport {LangServeAbstractAdapter} from '../adapter/adapter';\nimport {LangServeBatchAdapter} from '../adapter/batch';\nimport {LangServeStreamAdapter} from '../adapter/stream';\nimport {ChatAdapterOptions} from '../types/adapterOptions';\nimport {LangServeInputPreProcessor} from '../types/inputPreProcessor';\nimport {LangServeConfig, LangServeHeaders} from '../types/langServe';\nimport {LangServeOutputPreProcessor} from '../types/outputPreProcessor';\nimport {getDataTransferModeToUse} from '../utils/getDataTransferModeToUse';\nimport {ChatAdapterBuilder} from './builder';\n\nexport class LangServeAdapterBuilderImpl<AiMsg> implements ChatAdapterBuilder<AiMsg> {\n    private theConfig?: LangServeConfig;\n    private theDataTransferMode?: DataTransferMode;\n    private theHeaders?: LangServeHeaders;\n    private theInputPreProcessor?: LangServeInputPreProcessor<AiMsg>;\n    private theOutputPreProcessor?: LangServeOutputPreProcessor<AiMsg>;\n    private theUrl?: string;\n    private theUseInputSchema?: boolean;\n\n    constructor(cloneFrom?: LangServeAdapterBuilderImpl<AiMsg>) {\n        if (cloneFrom) {\n            this.theDataTransferMode = cloneFrom.theDataTransferMode;\n            this.theHeaders = cloneFrom.theHeaders;\n            this.theConfig = cloneFrom.theConfig;\n            this.theInputPreProcessor = cloneFrom.theInputPreProcessor;\n            this.theOutputPreProcessor = cloneFrom.theOutputPreProcessor;\n            this.theUrl = cloneFrom.theUrl;\n        }\n    }\n\n    create(): LangServeAbstractAdapter<AiMsg> {\n        if (!this.theUrl) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Unable to create LangServe adapter. URL is missing. ' +\n                    'Make sure you are calling withUrl() before calling create().',\n            });\n        }\n\n        const options: ChatAdapterOptions<AiMsg> = {\n            url: this.theUrl,\n            dataTransferMode: this.theDataTransferMode,\n            headers: this.theHeaders,\n            config: this.theConfig,\n            inputPreProcessor: this.theInputPreProcessor,\n            outputPreProcessor: this.theOutputPreProcessor,\n            useInputSchema: this.theUseInputSchema,\n        };\n\n        const dataTransferModeToUse = getDataTransferModeToUse(options);\n        if (dataTransferModeToUse === 'stream') {\n            return new LangServeStreamAdapter<AiMsg>(options);\n        }\n\n        return new LangServeBatchAdapter(options);\n    }\n\n    withConfig(langServeConfig: LangServeConfig): ChatAdapterBuilder<AiMsg> {\n        if (this.theConfig !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the config option more than once',\n            });\n        }\n\n        this.theConfig = langServeConfig;\n        return this;\n    }\n\n    withDataTransferMode(mode: DataTransferMode): LangServeAdapterBuilderImpl<AiMsg> {\n        if (this.theDataTransferMode !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the data loading mode more than once',\n            });\n        }\n\n        this.theDataTransferMode = mode;\n        return this;\n    }\n\n    withHeaders(headers: LangServeHeaders): ChatAdapterBuilder<AiMsg> {\n        if (this.theHeaders !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the headers option more than once',\n            });\n        }\n\n        this.theHeaders = headers;\n        return this;\n    }\n\n    withInputPreProcessor(inputPreProcessor: LangServeInputPreProcessor<AiMsg>): ChatAdapterBuilder<AiMsg> {\n        if (this.theInputPreProcessor !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the input pre-processor option more than once',\n            });\n        }\n\n        this.theInputPreProcessor = inputPreProcessor;\n        return this;\n    }\n\n    withInputSchema(useInputSchema: boolean): ChatAdapterBuilder<AiMsg> {\n        if (this.theUseInputSchema !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the input schema option more than once',\n            });\n        }\n\n        this.theUseInputSchema = useInputSchema;\n        return this;\n    }\n\n    withOutputPreProcessor(outputPreProcessor: LangServeOutputPreProcessor<AiMsg>): ChatAdapterBuilder<AiMsg> {\n        if (this.theOutputPreProcessor !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the output pre-processor option more than once',\n            });\n        }\n\n        this.theOutputPreProcessor = outputPreProcessor;\n        return this;\n    }\n\n    withUrl(runnableUrl: string): ChatAdapterBuilder<AiMsg> {\n        if (this.theUrl !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the runnable URL option more than once',\n            });\n        }\n\n        this.theUrl = runnableUrl;\n        return this;\n    }\n}\n","import {ChatAdapterBuilder} from './builder';\nimport {LangServeAdapterBuilderImpl} from './builderImpl';\n\nexport const createChatAdapter = <AiMsg = string>(): ChatAdapterBuilder<AiMsg> => {\n    return new LangServeAdapterBuilderImpl();\n};\n"],"names":["__publicField"],"mappings":"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"}