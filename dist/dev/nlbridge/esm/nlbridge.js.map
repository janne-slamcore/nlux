{"version":3,"file":"nlbridge.js","sources":["../../../../packages/shared/src/types/error.ts","../../../../packages/shared/src/utils/uid.ts","../../../../packages/shared/src/utils/warn.ts","../../../../packages/js/nlbridge/src/nlbridge/chatAdapter/adapter.ts","../../../../packages/js/nlbridge/src/nlbridge/chatAdapter/batch.ts","../../../../packages/js/nlbridge/src/nlbridge/chatAdapter/stream.ts","../../../../packages/js/nlbridge/src/nlbridge/chatAdapter/builder/builderImpl.ts","../../../../packages/js/nlbridge/src/nlbridge/chatAdapter/builder/createChatAdapter.ts","../../../../packages/js/nlbridge/src/nlbridge/contextAdapter/contextAdapter.ts","../../../../packages/js/nlbridge/src/nlbridge/contextAdapter/builder/builderImpl.ts","../../../../packages/js/nlbridge/src/nlbridge/contextAdapter/createContextAdapter.ts"],"sourcesContent":["import {NLErrorId} from './exceptions/errors';\n\nexport type NluxRawError = {\n    readonly message?: string;\n    readonly type?: string;\n    readonly source?: string;\n    readonly exceptionId?: NLErrorId;\n};\n\nexport class NluxError extends Error {\n    readonly exceptionId?: NLErrorId;\n    readonly message: string;\n    readonly source?: string;\n    readonly type: string;\n\n    constructor(rawError: NluxRawError = {}) {\n        super(rawError.message);\n\n        this.message = rawError.message ?? '';\n        this.source = rawError.source;\n        this.type = this.constructor.name;\n        this.exceptionId = rawError.exceptionId;\n    }\n}\n\nexport class NluxUsageError extends NluxError {\n}\n\nexport class NluxValidationError extends NluxError {\n}\n\nexport class NluxRenderingError extends NluxError {\n}\n","export const uid = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (character) => {\n        const randomValue = Math.random() * 16 | 0;\n        const value = character == 'x' ? randomValue : (randomValue & 0x3 | 0x8);\n        return value.toString(16);\n    });\n};\n","export const warn = (message: unknown) => {\n    if (typeof message === 'string') {\n        console.warn(`[nlux] ${message}`);\n        return;\n    }\n\n    if (message && typeof message.toString === 'function') {\n        console.warn(`[nlux] ${message.toString()}`);\n        return;\n    }\n\n    console.warn('[nlux]');\n    console.log(JSON.stringify(message, null, 2));\n};\n\nconst warnedMessages: string[] = [];\nexport const warnOnce = (message: string) => {\n    if (warnedMessages.includes(message)) {\n        return;\n    }\n\n    warnedMessages.push(message);\n    warn(message);\n};\n","import {\n    AiContext as CoreAiContext,\n    ChatAdapterExtras,\n    DataTransferMode,\n    StandardAdapterInfo,\n    StandardChatAdapter,\n    StreamingAdapterObserver,\n} from '@nlux/core';\nimport {uid} from '@shared/utils/uid';\nimport {warn} from '@shared/utils/warn';\nimport {ChatAdapterOptions, ChatAdapterUsageMode} from '../types/chatAdapterOptions';\n\nexport abstract class NLBridgeAbstractAdapter<AiMsg> implements StandardChatAdapter<AiMsg> {\n    static defaultDataTransferMode: DataTransferMode = 'stream';\n\n    private readonly __instanceId: string;\n    private readonly theAiContextToUse: CoreAiContext | undefined = undefined;\n    private readonly theDataTransferModeToUse: DataTransferMode;\n    private readonly theEndpointUrlToUse: string;\n    private readonly theHeaders: Record<string, string>;\n    private readonly theUsageMode: ChatAdapterUsageMode | undefined = undefined;\n\n    protected constructor(options: ChatAdapterOptions) {\n        this.__instanceId = `${this.info.id}-${uid()}`;\n\n        this.theUsageMode = options.mode;\n        this.theEndpointUrlToUse = options.url;\n        this.theAiContextToUse = options.context;\n        this.theDataTransferModeToUse = options.mode === 'copilot' && options.context ? 'batch' : 'stream';\n        this.theHeaders = options.headers ?? {};\n    }\n\n    get context(): CoreAiContext | undefined {\n        return this.theAiContextToUse;\n    }\n\n    get dataTransferMode(): DataTransferMode {\n        return this.theDataTransferModeToUse;\n    }\n\n    get endpointUrl(): string {\n        return this.theEndpointUrlToUse;\n    }\n\n    get headers(): Record<string, string> {\n        return this.theHeaders;\n    }\n\n    get id(): string {\n        return this.__instanceId;\n    }\n\n    get info(): StandardAdapterInfo {\n        return {\n            id: 'nlbridge-adapter',\n            capabilities: {\n                chat: true,\n                fileUpload: false,\n                textToSpeech: false,\n                speechToText: false,\n            },\n        };\n    }\n\n    get usageMode(): ChatAdapterUsageMode | undefined {\n        return this.theUsageMode;\n    }\n\n    abstract batchText(\n        message: string,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): Promise<string | object | undefined>;\n\n    preProcessAiBatchedMessage(message: string | object | undefined, extras: ChatAdapterExtras<AiMsg>): AiMsg | undefined {\n        if (typeof message === 'string') {\n            return message as AiMsg;\n        }\n\n        warn('NLBridge adapter received a non-string message from the server. Returning empty string.');\n        return '' as AiMsg;\n    }\n\n    preProcessAiStreamedChunk(chunk: string | object | undefined, extras: ChatAdapterExtras<AiMsg>): AiMsg | undefined {\n        if (typeof chunk === 'string') {\n            return chunk as AiMsg;\n        }\n\n        warn('NLBridge adapter received a non-string chunk from the server. Returning empty string.');\n        return '' as AiMsg;\n    }\n\n    abstract streamText(\n        message: string,\n        observer: StreamingAdapterObserver<string | object | undefined>,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): void;\n}\n","import {ChatAdapterExtras, StreamingAdapterObserver} from '@nlux/core';\nimport {NluxError, NluxUsageError} from '@shared/types/error';\nimport {ChatAdapterOptions} from '../types/chatAdapterOptions';\nimport {NLBridgeAbstractAdapter} from './adapter';\n\nexport class NLBridgeBatchAdapter<AiMsg = string> extends NLBridgeAbstractAdapter<AiMsg> {\n    constructor(options: ChatAdapterOptions) {\n        super(options);\n    }\n\n    async batchText(message: string, extras: ChatAdapterExtras<AiMsg>): Promise<string | object | undefined> {\n        if (this.context && this.context.contextId) {\n            await this.context.flush();\n        }\n\n        const action = this.usageMode === 'copilot' ? 'assist' : 'chat';\n        const response = await fetch(this.endpointUrl, {\n            method: 'POST',\n            headers: {\n                ...this.headers,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                action,\n                payload: {\n                    message,\n                    conversationHistory: extras.conversationHistory,\n                    contextId: this.context?.contextId,\n                },\n            }),\n        });\n\n        if (!response.ok) {\n            throw new NluxError({\n                source: this.constructor.name,\n                message: `NLBridge adapter returned status code: ${response.status}`,\n            });\n        }\n\n        const body = await response.json();\n        if (\n            typeof body === 'object' && body !== null && body.success === true &&\n            typeof body.result === 'object' && body.result !== null &&\n            typeof body.result.response === 'string'\n        ) {\n            const {response, task} = body.result;\n\n            if (\n                this.context && task\n                && typeof task === 'object' && typeof task.taskId === 'string'\n                && Array.isArray(task.parameters)\n            ) {\n                this.context.runTask(task.taskId, task.parameters);\n            }\n\n            return response;\n        } else {\n            throw new NluxError({\n                source: this.constructor.name,\n                message: 'Invalid response from NLBridge: String expected.',\n            });\n        }\n    }\n\n    streamText(\n        message: string,\n        observer: StreamingAdapterObserver<string | object | undefined>,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): void {\n        throw new NluxUsageError({\n            source: this.constructor.name,\n            message: 'Cannot stream text from the batch adapter!',\n        });\n    }\n}\n","import {ChatAdapterExtras, StreamingAdapterObserver} from '@nlux/core';\nimport {NluxUsageError} from '@shared/types/error';\nimport {warn} from '@shared/utils/warn';\nimport {ChatAdapterOptions} from '../types/chatAdapterOptions';\nimport {NLBridgeAbstractAdapter} from './adapter';\n\nexport class NLBridgeStreamAdapter<AiMsg> extends NLBridgeAbstractAdapter<AiMsg> {\n    constructor(options: ChatAdapterOptions) {\n        super(options);\n    }\n\n    async batchText(\n        message: string,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): Promise<string | object | undefined> {\n        throw new NluxUsageError({\n            source: this.constructor.name,\n            message: 'Cannot fetch text using the stream adapter!',\n        });\n    }\n\n    streamText(\n        message: string,\n        observer: StreamingAdapterObserver<string | object | undefined>,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): void {\n        const submitPrompt = () => {\n            fetch(this.endpointUrl, {\n                method: 'POST',\n                headers: {\n                    ...this.headers,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    action: 'chat-stream',\n                    payload: {\n                        message,\n                        conversationHistory: extras.conversationHistory,\n                        contextId: this.context?.contextId,\n                    },\n                }),\n            }).then(async (response) => {\n                if (!response.ok) {\n                    throw new Error(`NLBridge adapter returned status code: ${response.status}`);\n                }\n\n                if (!response.body) {\n                    throw new Error(`NLBridge adapter returned status code: ${response.status}`);\n                }\n\n                // Read a stream of server-sent events\n                // and feed them to the observer as they are being generated\n                const reader = response.body.getReader();\n                const textDecoder = new TextDecoder();\n\n                while (true) {\n                    const {value, done} = await reader.read();\n                    if (done) {\n                        break;\n                    }\n\n                    try {\n                        const chunk = textDecoder.decode(value);\n                        observer.next(chunk);\n                    } catch (err) {\n                        warn(`Error parsing chunk by NLBridgeStreamAdapter: ${err}`);\n                    }\n                }\n\n                observer.complete();\n            });\n        };\n\n        //\n        // When a valid context is available, flush it before submitting the prompt\n        //\n        if (this.context && this.context.contextId) {\n            this.context\n                .flush()\n                .then(() => submitPrompt())\n                // Submit prompt even when flushing fails\n                .catch(() => submitPrompt());\n\n            return;\n        }\n\n        // Submit prompt when no context is available\n        submitPrompt();\n    }\n}\n","import {AiContext as CoreAiContext, StandardChatAdapter} from '@nlux/core';\nimport {NluxUsageError} from '@shared/types/error';\nimport {ChatAdapterOptions, ChatAdapterUsageMode} from '../../types/chatAdapterOptions';\nimport {NLBridgeAbstractAdapter} from '../adapter';\nimport {NLBridgeBatchAdapter} from '../batch';\nimport {NLBridgeStreamAdapter} from '../stream';\nimport {ChatAdapterBuilder} from './builder';\n\nexport class ChatAdapterBuilderImpl<AiMsg> implements ChatAdapterBuilder<AiMsg> {\n    private theContext?: CoreAiContext | undefined;\n    private theHeaders?: Record<string, string>;\n    private theMode?: ChatAdapterUsageMode;\n    private theUrl?: string;\n\n    constructor(cloneFrom?: ChatAdapterBuilderImpl<AiMsg>) {\n        if (cloneFrom) {\n            this.theUrl = cloneFrom.theUrl;\n            this.theMode = cloneFrom.theMode;\n            this.theContext = cloneFrom.theContext;\n            this.theHeaders = cloneFrom.theHeaders;\n        }\n    }\n\n    create(): StandardChatAdapter<AiMsg> {\n        if (!this.theUrl) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Unable to create NLBridge adapter. URL is missing. Make sure you are call withUrl() '\n                    + 'or provide url option before calling creating the adapter.',\n            });\n        }\n\n        const options: ChatAdapterOptions = {\n            url: this.theUrl,\n            mode: this.theMode,\n            context: this.theContext,\n            headers: this.theHeaders,\n        };\n\n        const dataTransferModeToUse = options.mode\n            ?? NLBridgeAbstractAdapter.defaultDataTransferMode;\n\n        if (dataTransferModeToUse === 'stream') {\n            return new NLBridgeStreamAdapter<AiMsg>(options);\n        }\n\n        return new NLBridgeBatchAdapter<AiMsg>(options);\n    }\n\n    withContext(context: CoreAiContext): ChatAdapterBuilderImpl<AiMsg> {\n        if (this.theContext !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the context ID option more than once',\n            });\n        }\n\n        this.theContext = context;\n        return this;\n    }\n\n    withHeaders(headers: Record<string, string>): ChatAdapterBuilderImpl<AiMsg> {\n        if (this.theHeaders !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the headers option more than once',\n            });\n        }\n\n        this.theHeaders = headers;\n        return this;\n    }\n\n    withMode(mode: ChatAdapterUsageMode): ChatAdapterBuilderImpl<AiMsg> {\n        if (this.theMode !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the usage mode option more than once',\n            });\n        }\n\n        this.theMode = mode;\n        return this;\n    }\n\n    withUrl(endpointUrl: string): ChatAdapterBuilderImpl<AiMsg> {\n        if (this.theUrl !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the endpoint URL option more than once',\n            });\n        }\n\n        this.theUrl = endpointUrl;\n        return this;\n    }\n}\n","import {ChatAdapterBuilder} from './builder';\nimport {ChatAdapterBuilderImpl} from './builderImpl';\n\nexport const createChatAdapter = <AiMsg = string>(): ChatAdapterBuilder<AiMsg> => {\n    return new ChatAdapterBuilderImpl<AiMsg>();\n};\n","import {\n    ContextActionResult,\n    ContextAdapter,\n    ContextAdapterExtras,\n    ContextItems,\n    ContextTasks,\n    SetContextResult,\n} from '@nlux/core';\n\ntype BackendContextAction =\n    'update-context-items'\n    | 'update-context-tasks'\n    | 'remove-context-items'\n    | 'remove-context-tasks'\n    | 'reset-context-tasks'\n    | 'reset-context-items'\n    | 'discard-context'\n    | 'create-context';\n\nexport class NLBridgeContextAdapter implements ContextAdapter {\n\n    private headers: Record<string, string>;\n    private readonly url: string;\n\n    constructor(url: string, headers?: Record<string, string>) {\n        this.url = url;\n        this.headers = headers ?? {};\n    }\n\n    async create(contextItems?: ContextItems, extras?: ContextAdapterExtras): Promise<SetContextResult> {\n        try {\n            const result = await fetch(this.url, {\n                method: 'POST',\n                headers: {\n                    ...this.headers,\n                    ...extras?.headers,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    action: 'create-context',\n                    payload: contextItems ? {items: contextItems} : undefined,\n                }),\n            });\n\n            if (!result.ok) {\n                return {\n                    success: false,\n                    error: 'Failed to set context',\n                };\n            }\n\n            const data = await result.json();\n            if (!data?.result?.contextId) {\n                return {\n                    success: false,\n                    error: 'Invalid context ID',\n                };\n            }\n\n            return {\n                success: true,\n                contextId: data.result.contextId,\n            };\n        } catch (_error) {\n            return {\n                success: false,\n                error: 'Failed to set context',\n            };\n        }\n    }\n\n    discard(contextId: string, extras?: ContextAdapterExtras): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'discard-context',\n            undefined,\n            extras,\n        );\n    }\n\n    removeItems(contextId: string, itemIds: string[], extras?: ContextAdapterExtras): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'remove-context-items',\n            {itemIds},\n            extras,\n        );\n    }\n\n    async removeTasks(contextId: string, taskIds: string[], extras?: ContextAdapterExtras): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'remove-context-tasks',\n            {taskIds},\n            extras,\n        );\n    }\n\n    resetItems(contextId: string, newItems?: ContextItems, extras?: ContextAdapterExtras): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'reset-context-items',\n            newItems ? {items: newItems} : undefined,\n            extras,\n        );\n    }\n\n    resetTasks(contextId: string, newTasks?: ContextTasks, extras?: ContextAdapterExtras): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'reset-context-tasks',\n            newTasks,\n            extras,\n        );\n    }\n\n    async sendAction(\n        contextId: string,\n        action: BackendContextAction,\n        payload?: Record<string, unknown>,\n        extras?: ContextAdapterExtras,\n    ): Promise<{\n        success: false;\n        error: string;\n    } | {\n        success: true;\n        items?: ContextItems;\n    }> {\n        if (!contextId) {\n            return {\n                success: false,\n                error: 'Invalid context ID',\n            };\n        }\n\n        try {\n            const result = await fetch(this.url, {\n                method: 'POST',\n                headers: {\n                    ...extras?.headers,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    action,\n                    payload: {\n                        ...payload,\n                        contextId,\n                    },\n                }),\n            });\n\n            if (!result.ok) {\n                return {\n                    success: false,\n                    error: 'Failed to send action',\n                };\n            }\n\n            const items = await result.json();\n\n            return {\n                success: true,\n                items,\n            };\n        } catch (_error) {\n            return {\n                success: false,\n                error: 'Failed to send action',\n            };\n        }\n    }\n\n    async updateItems(contextId: string, itemsToUpdate: Partial<ContextItems>, extras?: ContextAdapterExtras): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'update-context-items',\n            {items: itemsToUpdate},\n            extras,\n        );\n    }\n\n    async updateTasks(contextId: string, tasks: Partial<ContextTasks>, extras: ContextAdapterExtras | undefined): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'update-context-tasks',\n            {tasks},\n            extras,\n        );\n    }\n}\n","import {ContextAdapter} from '@nlux/core';\nimport {NLBridgeContextAdapter} from '../contextAdapter';\nimport {ContextAdapterBuilder} from './builder';\n\nexport class ContextAdapterBuilderImpl implements ContextAdapterBuilder {\n    private endpointUrl: string | undefined = undefined;\n    private headers: Record<string, string> | undefined = undefined;\n\n    build(): ContextAdapter {\n        if (!this.endpointUrl) {\n            throw new Error('Endpoint URL is required');\n        }\n\n        return new NLBridgeContextAdapter(\n            this.endpointUrl,\n            this.headers,\n        );\n    }\n\n    withHeaders(headers: Record<string, string>): ContextAdapterBuilderImpl {\n        if (this.headers !== undefined) {\n            throw new Error('Cannot set the headers more than once');\n        }\n\n        this.headers = headers;\n        return this;\n    }\n\n    withUrl(endpointUrl: string): ContextAdapterBuilderImpl {\n        if (this.endpointUrl !== undefined && this.endpointUrl !== endpointUrl) {\n            throw new Error('Cannot set the endpoint URL more than once');\n        }\n\n        this.endpointUrl = endpointUrl;\n        return this;\n    }\n}","import {ContextAdapterBuilder} from './builder/builder';\nimport {ContextAdapterBuilderImpl} from './builder/builderImpl';\n\nexport const createContextAdapter = (): ContextAdapterBuilder => {\n    return new ContextAdapterBuilderImpl();\n};\n"],"names":["__publicField","response"],"mappings":"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"}