{"version":3,"file":"nlbridge.js","sources":["../../../../packages/shared/src/types/error.ts","../../../../packages/shared/src/utils/uid.ts","../../../../packages/shared/src/utils/warn.ts","../../../../packages/js/nlbridge/src/nlbridge/chatAdapter/adapter.ts","../../../../packages/js/nlbridge/src/nlbridge/chatAdapter/batch.ts","../../../../packages/js/nlbridge/src/nlbridge/chatAdapter/stream.ts","../../../../packages/js/nlbridge/src/nlbridge/chatAdapter/builder/builderImpl.ts","../../../../packages/js/nlbridge/src/nlbridge/chatAdapter/builder/createChatAdapter.ts","../../../../packages/js/nlbridge/src/nlbridge/contextAdapter/contextAdapter.ts","../../../../packages/js/nlbridge/src/nlbridge/contextAdapter/builder/builderImpl.ts","../../../../packages/js/nlbridge/src/nlbridge/contextAdapter/createContextAdapter.ts"],"sourcesContent":["import {NLErrorId} from './exceptions/errors';\n\nexport type NluxRawError = {\n    readonly message?: string;\n    readonly type?: string;\n    readonly source?: string;\n    readonly exceptionId?: NLErrorId;\n};\n\nexport class NluxError extends Error {\n    readonly exceptionId?: NLErrorId;\n    readonly message: string;\n    readonly source?: string;\n    readonly type: string;\n\n    constructor(rawError: NluxRawError = {}) {\n        super(rawError.message);\n\n        this.message = rawError.message ?? '';\n        this.source = rawError.source;\n        this.type = this.constructor.name;\n        this.exceptionId = rawError.exceptionId;\n    }\n}\n\nexport class NluxUsageError extends NluxError {\n}\n\nexport class NluxValidationError extends NluxError {\n}\n\nexport class NluxRenderingError extends NluxError {\n}\n","export const uid = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (character) => {\n        const randomValue = Math.random() * 16 | 0;\n        const value = character == 'x' ? randomValue : (randomValue & 0x3 | 0x8);\n        return value.toString(16);\n    });\n};\n","export const warn = (message: unknown) => {\n    if (typeof message === 'string') {\n        console.warn(`[nlux] ${message}`);\n        return;\n    }\n\n    if (message && typeof message.toString === 'function') {\n        console.warn(`[nlux] ${message.toString()}`);\n        return;\n    }\n\n    console.warn('[nlux]');\n    console.log(JSON.stringify(message, null, 2));\n};\n\nconst warnedMessages: string[] = [];\nexport const warnOnce = (message: string) => {\n    if (warnedMessages.includes(message)) {\n        return;\n    }\n\n    warnedMessages.push(message);\n    warn(message);\n};\n","import {\n    AiContext as CoreAiContext,\n    ChatAdapterExtras,\n    DataTransferMode,\n    StandardAdapterInfo,\n    StandardChatAdapter,\n    StreamingAdapterObserver,\n} from '@nlux/core';\nimport {uid} from '@shared/utils/uid';\nimport {warn} from '@shared/utils/warn';\nimport {ChatAdapterOptions, ChatAdapterUsageMode} from '../types/chatAdapterOptions';\n\nexport abstract class NLBridgeAbstractAdapter<AiMsg> implements StandardChatAdapter<AiMsg> {\n    static defaultDataTransferMode: DataTransferMode = 'stream';\n\n    private readonly __instanceId: string;\n    private readonly theAiContextToUse: CoreAiContext | undefined = undefined;\n    private readonly theDataTransferModeToUse: DataTransferMode;\n    private readonly theEndpointUrlToUse: string;\n    private readonly theHeaders: Record<string, string>;\n    private readonly theUsageMode: ChatAdapterUsageMode | undefined = undefined;\n\n    protected constructor(options: ChatAdapterOptions) {\n        this.__instanceId = `${this.info.id}-${uid()}`;\n\n        this.theUsageMode = options.mode;\n        this.theEndpointUrlToUse = options.url;\n        this.theAiContextToUse = options.context;\n        this.theDataTransferModeToUse = options.mode === 'copilot' && options.context ? 'batch' : 'stream';\n        this.theHeaders = options.headers ?? {};\n    }\n\n    get context(): CoreAiContext | undefined {\n        return this.theAiContextToUse;\n    }\n\n    get dataTransferMode(): DataTransferMode {\n        return this.theDataTransferModeToUse;\n    }\n\n    get endpointUrl(): string {\n        return this.theEndpointUrlToUse;\n    }\n\n    get headers(): Record<string, string> {\n        return this.theHeaders;\n    }\n\n    get id(): string {\n        return this.__instanceId;\n    }\n\n    get info(): StandardAdapterInfo {\n        return {\n            id: 'nlbridge-adapter',\n            capabilities: {\n                chat: true,\n                fileUpload: false,\n                textToSpeech: false,\n                speechToText: false,\n            },\n        };\n    }\n\n    get usageMode(): ChatAdapterUsageMode | undefined {\n        return this.theUsageMode;\n    }\n\n    abstract batchText(\n        message: string,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): Promise<string | object | undefined>;\n\n    preProcessAiBatchedMessage(message: string | object | undefined, extras: ChatAdapterExtras<AiMsg>): AiMsg | undefined {\n        if (typeof message === 'string') {\n            return message as AiMsg;\n        }\n\n        warn('NLBridge adapter received a non-string message from the server. Returning empty string.');\n        return '' as AiMsg;\n    }\n\n    preProcessAiStreamedChunk(chunk: string | object | undefined, extras: ChatAdapterExtras<AiMsg>): AiMsg | undefined {\n        if (typeof chunk === 'string') {\n            return chunk as AiMsg;\n        }\n\n        warn('NLBridge adapter received a non-string chunk from the server. Returning empty string.');\n        return '' as AiMsg;\n    }\n\n    abstract streamText(\n        message: string,\n        observer: StreamingAdapterObserver<string | object | undefined>,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): void;\n}\n","import {ChatAdapterExtras, StreamingAdapterObserver} from '@nlux/core';\nimport {NluxError, NluxUsageError} from '@shared/types/error';\nimport {ChatAdapterOptions} from '../types/chatAdapterOptions';\nimport {NLBridgeAbstractAdapter} from './adapter';\n\nexport class NLBridgeBatchAdapter<AiMsg = string> extends NLBridgeAbstractAdapter<AiMsg> {\n    constructor(options: ChatAdapterOptions) {\n        super(options);\n    }\n\n    async batchText(message: string, extras: ChatAdapterExtras<AiMsg>): Promise<string | object | undefined> {\n        if (this.context && this.context.contextId) {\n            await this.context.flush();\n        }\n\n        const action = this.usageMode === 'copilot' ? 'assist' : 'chat';\n        const response = await fetch(this.endpointUrl, {\n            method: 'POST',\n            headers: {\n                ...this.headers,\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                action,\n                payload: {\n                    message,\n                    conversationHistory: extras.conversationHistory,\n                    contextId: this.context?.contextId,\n                },\n            }),\n        });\n\n        if (!response.ok) {\n            throw new NluxError({\n                source: this.constructor.name,\n                message: `NLBridge adapter returned status code: ${response.status}`,\n            });\n        }\n\n        const body = await response.json();\n        if (\n            typeof body === 'object' && body !== null && body.success === true &&\n            typeof body.result === 'object' && body.result !== null &&\n            typeof body.result.response === 'string'\n        ) {\n            const {response, task} = body.result;\n\n            if (\n                this.context && task\n                && typeof task === 'object' && typeof task.taskId === 'string'\n                && Array.isArray(task.parameters)\n            ) {\n                this.context.runTask(task.taskId, task.parameters);\n            }\n\n            return response;\n        } else {\n            throw new NluxError({\n                source: this.constructor.name,\n                message: 'Invalid response from NLBridge: String expected.',\n            });\n        }\n    }\n\n    streamText(\n        message: string,\n        observer: StreamingAdapterObserver<string | object | undefined>,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): void {\n        throw new NluxUsageError({\n            source: this.constructor.name,\n            message: 'Cannot stream text from the batch adapter!',\n        });\n    }\n}\n","import {ChatAdapterExtras, StreamingAdapterObserver} from '@nlux/core';\nimport {NluxUsageError} from '@shared/types/error';\nimport {warn} from '@shared/utils/warn';\nimport {ChatAdapterOptions} from '../types/chatAdapterOptions';\nimport {NLBridgeAbstractAdapter} from './adapter';\n\nexport class NLBridgeStreamAdapter<AiMsg> extends NLBridgeAbstractAdapter<AiMsg> {\n    constructor(options: ChatAdapterOptions) {\n        super(options);\n    }\n\n    async batchText(\n        message: string,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): Promise<string | object | undefined> {\n        throw new NluxUsageError({\n            source: this.constructor.name,\n            message: 'Cannot fetch text using the stream adapter!',\n        });\n    }\n\n    streamText(\n        message: string,\n        observer: StreamingAdapterObserver<string | object | undefined>,\n        extras: ChatAdapterExtras<AiMsg>,\n    ): void {\n        const submitPrompt = () => {\n            fetch(this.endpointUrl, {\n                method: 'POST',\n                headers: {\n                    ...this.headers,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    action: 'chat-stream',\n                    payload: {\n                        message,\n                        conversationHistory: extras.conversationHistory,\n                        contextId: this.context?.contextId,\n                    },\n                }),\n            }).then(async (response) => {\n                if (!response.ok) {\n                    throw new Error(`NLBridge adapter returned status code: ${response.status}`);\n                }\n\n                if (!response.body) {\n                    throw new Error(`NLBridge adapter returned status code: ${response.status}`);\n                }\n\n                // Read a stream of server-sent events\n                // and feed them to the observer as they are being generated\n                const reader = response.body.getReader();\n                const textDecoder = new TextDecoder();\n\n                while (true) {\n                    const {value, done} = await reader.read();\n                    if (done) {\n                        break;\n                    }\n\n                    try {\n                        const chunk = textDecoder.decode(value);\n                        observer.next(chunk);\n                    } catch (err) {\n                        warn(`Error parsing chunk by NLBridgeStreamAdapter: ${err}`);\n                    }\n                }\n\n                observer.complete();\n            });\n        };\n\n        //\n        // When a valid context is available, flush it before submitting the prompt\n        //\n        if (this.context && this.context.contextId) {\n            this.context\n                .flush()\n                .then(() => submitPrompt())\n                // Submit prompt even when flushing fails\n                .catch(() => submitPrompt());\n\n            return;\n        }\n\n        // Submit prompt when no context is available\n        submitPrompt();\n    }\n}\n","import {AiContext as CoreAiContext, StandardChatAdapter} from '@nlux/core';\nimport {NluxUsageError} from '@shared/types/error';\nimport {ChatAdapterOptions, ChatAdapterUsageMode} from '../../types/chatAdapterOptions';\nimport {NLBridgeAbstractAdapter} from '../adapter';\nimport {NLBridgeBatchAdapter} from '../batch';\nimport {NLBridgeStreamAdapter} from '../stream';\nimport {ChatAdapterBuilder} from './builder';\n\nexport class ChatAdapterBuilderImpl<AiMsg> implements ChatAdapterBuilder<AiMsg> {\n    private theContext?: CoreAiContext | undefined;\n    private theHeaders?: Record<string, string>;\n    private theMode?: ChatAdapterUsageMode;\n    private theUrl?: string;\n\n    constructor(cloneFrom?: ChatAdapterBuilderImpl<AiMsg>) {\n        if (cloneFrom) {\n            this.theUrl = cloneFrom.theUrl;\n            this.theMode = cloneFrom.theMode;\n            this.theContext = cloneFrom.theContext;\n            this.theHeaders = cloneFrom.theHeaders;\n        }\n    }\n\n    create(): StandardChatAdapter<AiMsg> {\n        if (!this.theUrl) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Unable to create NLBridge adapter. URL is missing. Make sure you are call withUrl() '\n                    + 'or provide url option before calling creating the adapter.',\n            });\n        }\n\n        const options: ChatAdapterOptions = {\n            url: this.theUrl,\n            mode: this.theMode,\n            context: this.theContext,\n            headers: this.theHeaders,\n        };\n\n        const dataTransferModeToUse = options.mode\n            ?? NLBridgeAbstractAdapter.defaultDataTransferMode;\n\n        if (dataTransferModeToUse === 'stream') {\n            return new NLBridgeStreamAdapter<AiMsg>(options);\n        }\n\n        return new NLBridgeBatchAdapter<AiMsg>(options);\n    }\n\n    withContext(context: CoreAiContext): ChatAdapterBuilderImpl<AiMsg> {\n        if (this.theContext !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the context ID option more than once',\n            });\n        }\n\n        this.theContext = context;\n        return this;\n    }\n\n    withHeaders(headers: Record<string, string>): ChatAdapterBuilderImpl<AiMsg> {\n        if (this.theHeaders !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the headers option more than once',\n            });\n        }\n\n        this.theHeaders = headers;\n        return this;\n    }\n\n    withMode(mode: ChatAdapterUsageMode): ChatAdapterBuilderImpl<AiMsg> {\n        if (this.theMode !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the usage mode option more than once',\n            });\n        }\n\n        this.theMode = mode;\n        return this;\n    }\n\n    withUrl(endpointUrl: string): ChatAdapterBuilderImpl<AiMsg> {\n        if (this.theUrl !== undefined) {\n            throw new NluxUsageError({\n                source: this.constructor.name,\n                message: 'Cannot set the endpoint URL option more than once',\n            });\n        }\n\n        this.theUrl = endpointUrl;\n        return this;\n    }\n}\n","import {ChatAdapterBuilder} from './builder';\nimport {ChatAdapterBuilderImpl} from './builderImpl';\n\nexport const createChatAdapter = <AiMsg = string>(): ChatAdapterBuilder<AiMsg> => {\n    return new ChatAdapterBuilderImpl<AiMsg>();\n};\n","import {\n    ContextActionResult,\n    ContextAdapter,\n    ContextAdapterExtras,\n    ContextItems,\n    ContextTasks,\n    SetContextResult,\n} from '@nlux/core';\n\ntype BackendContextAction =\n    'update-context-items'\n    | 'update-context-tasks'\n    | 'remove-context-items'\n    | 'remove-context-tasks'\n    | 'reset-context-tasks'\n    | 'reset-context-items'\n    | 'discard-context'\n    | 'create-context';\n\nexport class NLBridgeContextAdapter implements ContextAdapter {\n\n    private headers: Record<string, string>;\n    private readonly url: string;\n\n    constructor(url: string, headers?: Record<string, string>) {\n        this.url = url;\n        this.headers = headers ?? {};\n    }\n\n    async create(contextItems?: ContextItems, extras?: ContextAdapterExtras): Promise<SetContextResult> {\n        try {\n            const result = await fetch(this.url, {\n                method: 'POST',\n                headers: {\n                    ...this.headers,\n                    ...extras?.headers,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    action: 'create-context',\n                    payload: contextItems ? {items: contextItems} : undefined,\n                }),\n            });\n\n            if (!result.ok) {\n                return {\n                    success: false,\n                    error: 'Failed to set context',\n                };\n            }\n\n            const data = await result.json();\n            if (!data?.result?.contextId) {\n                return {\n                    success: false,\n                    error: 'Invalid context ID',\n                };\n            }\n\n            return {\n                success: true,\n                contextId: data.result.contextId,\n            };\n        } catch (_error) {\n            return {\n                success: false,\n                error: 'Failed to set context',\n            };\n        }\n    }\n\n    discard(contextId: string, extras?: ContextAdapterExtras): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'discard-context',\n            undefined,\n            extras,\n        );\n    }\n\n    removeItems(contextId: string, itemIds: string[], extras?: ContextAdapterExtras): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'remove-context-items',\n            {itemIds},\n            extras,\n        );\n    }\n\n    async removeTasks(contextId: string, taskIds: string[], extras?: ContextAdapterExtras): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'remove-context-tasks',\n            {taskIds},\n            extras,\n        );\n    }\n\n    resetItems(contextId: string, newItems?: ContextItems, extras?: ContextAdapterExtras): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'reset-context-items',\n            newItems ? {items: newItems} : undefined,\n            extras,\n        );\n    }\n\n    resetTasks(contextId: string, newTasks?: ContextTasks, extras?: ContextAdapterExtras): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'reset-context-tasks',\n            newTasks,\n            extras,\n        );\n    }\n\n    async sendAction(\n        contextId: string,\n        action: BackendContextAction,\n        payload?: Record<string, unknown>,\n        extras?: ContextAdapterExtras,\n    ): Promise<{\n        success: false;\n        error: string;\n    } | {\n        success: true;\n        items?: ContextItems;\n    }> {\n        if (!contextId) {\n            return {\n                success: false,\n                error: 'Invalid context ID',\n            };\n        }\n\n        try {\n            const result = await fetch(this.url, {\n                method: 'POST',\n                headers: {\n                    ...extras?.headers,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    action,\n                    payload: {\n                        ...payload,\n                        contextId,\n                    },\n                }),\n            });\n\n            if (!result.ok) {\n                return {\n                    success: false,\n                    error: 'Failed to send action',\n                };\n            }\n\n            const items = await result.json();\n\n            return {\n                success: true,\n                items,\n            };\n        } catch (_error) {\n            return {\n                success: false,\n                error: 'Failed to send action',\n            };\n        }\n    }\n\n    async updateItems(contextId: string, itemsToUpdate: Partial<ContextItems>, extras?: ContextAdapterExtras): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'update-context-items',\n            {items: itemsToUpdate},\n            extras,\n        );\n    }\n\n    async updateTasks(contextId: string, tasks: Partial<ContextTasks>, extras: ContextAdapterExtras | undefined): Promise<ContextActionResult> {\n        return this.sendAction(\n            contextId,\n            'update-context-tasks',\n            {tasks},\n            extras,\n        );\n    }\n}\n","import {ContextAdapter} from '@nlux/core';\nimport {NLBridgeContextAdapter} from '../contextAdapter';\nimport {ContextAdapterBuilder} from './builder';\n\nexport class ContextAdapterBuilderImpl implements ContextAdapterBuilder {\n    private endpointUrl: string | undefined = undefined;\n    private headers: Record<string, string> | undefined = undefined;\n\n    build(): ContextAdapter {\n        if (!this.endpointUrl) {\n            throw new Error('Endpoint URL is required');\n        }\n\n        return new NLBridgeContextAdapter(\n            this.endpointUrl,\n            this.headers,\n        );\n    }\n\n    withHeaders(headers: Record<string, string>): ContextAdapterBuilderImpl {\n        if (this.headers !== undefined) {\n            throw new Error('Cannot set the headers more than once');\n        }\n\n        this.headers = headers;\n        return this;\n    }\n\n    withUrl(endpointUrl: string): ContextAdapterBuilderImpl {\n        if (this.endpointUrl !== undefined && this.endpointUrl !== endpointUrl) {\n            throw new Error('Cannot set the endpoint URL more than once');\n        }\n\n        this.endpointUrl = endpointUrl;\n        return this;\n    }\n}","import {ContextAdapterBuilder} from './builder/builder';\nimport {ContextAdapterBuilderImpl} from './builder/builderImpl';\n\nexport const createContextAdapter = (): ContextAdapterBuilder => {\n    return new ContextAdapterBuilderImpl();\n};\n"],"names":["__publicField","response"],"mappings":"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"}