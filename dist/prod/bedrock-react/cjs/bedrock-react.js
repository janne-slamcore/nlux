"use strict";var e=require("react"),t=require("@nlux/bedrock"),r=Object.defineProperty,s=(e,t,s)=>((e,t,s)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s)(e,"symbol"!=typeof t?t+"":t,s);class o extends Error{constructor(e={}){super(e.message),s(this,"exceptionId"),s(this,"message"),s(this,"source"),s(this,"type"),this.message=e.message??"",this.source=e.source,this.type=this.constructor.name,this.exceptionId=e.exceptionId}}class a extends o{}const i="hooks/getAdapterBuilder";exports.useChatAdapter=r=>{if(!r.model)throw new Error("You must provide either a model or an endpoint to use Hugging Face Inference API.");const[s,o]=e.useState(!1),[n]=e.useState((e=>{const{model:r,credentials:s,dataTransferMode:o}=e||{};if(o&&"stream"!==o&&"batch"!==o)throw new a({source:i,message:'Data transfer mode for Hugging Face Inference API must be either "stream" or "batch"'});if(void 0===r)throw new a({source:i,message:"You must provide either a model or an endpoint to use Hugging Face Inference API."});let n=t.createChatAdapter().withModel(r);return void 0!==s&&(n=n.withCredintial(s)),void 0!==o&&(n=n.withDataTransferMode(o)),n})(r).create()),{dataTransferMode:c,model:d}=r||{};return e.useEffect(()=>{s||o(!0)},[c,d]),n};
