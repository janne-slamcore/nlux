import{useState as e,useEffect as t}from"react";import{createChatAdapter as r}from"@nlux/bedrock";var o=Object.defineProperty,s=(e,t,r)=>((e,t,r)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r)(e,"symbol"!=typeof t?t+"":t,r);class a extends Error{constructor(e={}){super(e.message),s(this,"exceptionId"),s(this,"message"),s(this,"source"),s(this,"type"),this.message=e.message??"",this.source=e.source,this.type=this.constructor.name,this.exceptionId=e.exceptionId}}class n extends a{}const i="hooks/getAdapterBuilder",c=o=>{if(!o.model)throw new Error("You must provide either a model or an endpoint to use Hugging Face Inference API.");const[s,a]=e(!1),[c]=e((e=>{const{model:t,credentials:o,dataTransferMode:s}=e||{};if(s&&"stream"!==s&&"batch"!==s)throw new n({source:i,message:'Data transfer mode for Hugging Face Inference API must be either "stream" or "batch"'});if(void 0===t)throw new n({source:i,message:"You must provide either a model or an endpoint to use Hugging Face Inference API."});let a=r().withModel(t);return void 0!==o&&(a=a.withCredintial(o)),void 0!==s&&(a=a.withDataTransferMode(s)),a})(o).create()),{dataTransferMode:d,model:u}=o||{};return t(()=>{s||a(!0)},[d,u]),c};export{c as useChatAdapter};
