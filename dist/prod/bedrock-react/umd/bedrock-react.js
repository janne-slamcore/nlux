!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("react"),require("@nlux/bedrock")):"function"==typeof define&&define.amd?define(["exports","react","@nlux/bedrock"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["@nlux/bedrock-react"]={},e.react,e.bedrock)}(this,function(e,t,r){"use strict";var o=Object.defineProperty,s=(e,t,r)=>((e,t,r)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r)(e,"symbol"!=typeof t?t+"":t,r);class n extends Error{constructor(e={}){super(e.message),s(this,"exceptionId"),s(this,"message"),s(this,"source"),s(this,"type"),this.message=e.message??"",this.source=e.source,this.type=this.constructor.name,this.exceptionId=e.exceptionId}}class a extends n{}const i="hooks/getAdapterBuilder";e.useChatAdapter=e=>{if(!e.model)throw new Error("You must provide either a model or an endpoint to use Hugging Face Inference API.");const[o,s]=t.useState(!1),[n]=t.useState((e=>{const{model:t,credentials:o,dataTransferMode:s}=e||{};if(s&&"stream"!==s&&"batch"!==s)throw new a({source:i,message:'Data transfer mode for Hugging Face Inference API must be either "stream" or "batch"'});if(void 0===t)throw new a({source:i,message:"You must provide either a model or an endpoint to use Hugging Face Inference API."});let n=r.createChatAdapter().withModel(t);return void 0!==o&&(n=n.withCredintial(o)),void 0!==s&&(n=n.withDataTransferMode(s)),n})(e).create()),{dataTransferMode:c,model:d}=e||{};return t.useEffect(()=>{o||s(!0)},[c,d]),n}});
