import{BedrockRuntimeClient as e,ConverseCommand as t,ConverseStreamCommand as n}from"@aws-sdk/client-bedrock-runtime";var o=Object.defineProperty,s=(e,t,n)=>((e,t,n)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n)(e,"symbol"!=typeof t?t+"":t,n);class r extends Error{constructor(e={}){super(e.message),s(this,"exceptionId"),s(this,"message"),s(this,"source"),s(this,"type"),this.message=e.message??"",this.source=e.source,this.type=this.constructor.name,this.exceptionId=e.exceptionId}}class i extends r{}class a extends r{}const c=e=>{if("object"==typeof e&&null!==e){const t=e;if("invalid_api_key"===t.code)return"invalid-api-key";if(t.message&&"string"==typeof t.message&&t.message.toLowerCase().includes("connection error"))return"connection-error"}return null};var h=Object.defineProperty,d=(e,t,n)=>((e,t,n)=>t in e?h(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n)(e,"symbol"!=typeof t?t+"":t,n);const l=class o{constructor(t){if(d(this,"__instanceId"),d(this,"client"),d(this,"options"),!t.model||!t.credentials||!t.region)throw new a({source:this.constructor.name,message:"when creating the Bedrock adapter, you must set model, credentials and region"});this.__instanceId=`${this.info.id}-${"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,e=>{const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)})}`,this.options={...t},this.client=new e(t)}get dataTransferMode(){return this.options.dataTransferMode??o.defaultDataTransferMode}get id(){return this.__instanceId}get info(){return{id:"bedrock-adapter",capabilities:{chat:!0,fileUpload:!1,textToSpeech:!1,speechToText:!1}}}async batchText(e){const n=[{role:"user",content:[{text:e}]}];try{const e=await this.client.send(new t({modelId:this.options.model,messages:n,inferenceConfig:this.options.inferenceConfig}));return e.output?.message?.content?.[0].text}catch(e){const t=e.message||"An error occurred while sending the message to the Bedrock API";throw new r({source:this.constructor.name,message:t,exceptionId:c(e)??void 0})}}preProcessAiBatchedMessage(e,t){throw new Error("Method not implemented.")}preProcessAiStreamedChunk(e,t){throw new Error("Method not implemented.")}streamText(e,t){Promise.resolve().then(async()=>{const o=[{role:"user",content:[{text:e}]}],s=new n({modelId:this.options.model,messages:o,inferenceConfig:this.options.inferenceConfig});try{const e=await this.client.send(s);for await(const n of e.stream)n.contentBlockDelta&&t.next(n.contentBlockDelta.delta?.text);t.complete()}catch(e){const n=e;t.error(n),(e=>{"string"!=typeof e?e&&"function"==typeof e.toString?console.warn(`[nlux] ${e.toString()}`):console.warn("[nlux]"):console.warn(`[nlux] ${e}`)})("An error occurred while sending the message to the Bedrock streaming API: \n"+n.message)}})}};d(l,"defaultDataTransferMode","batch");let u=l;var m=Object.defineProperty,f=(e,t,n)=>((e,t,n)=>t in e?m(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n)(e,"symbol"!=typeof t?t+"":t,n);class g{constructor(){f(this,"credentials",null),f(this,"inferenceConfig",null),f(this,"region",null),f(this,"theDataTransferMode","stream"),f(this,"theModel",null),f(this,"withDataTransferModeCalled",!1)}create(){if(!this.theModel)throw new a({source:this.constructor.name,message:'You must provide a model or an endpoint using the "withModel()" method or the "withEndpoint()" method!'});return new u({dataTransferMode:this.theDataTransferMode,model:this.theModel??void 0,credentials:this.credentials??void 0,region:this.region??void 0,inferenceConfig:this.inferenceConfig??void 0})}withCredintial(e){if(null!==this.credentials)throw new i({source:this.constructor.name,message:"Cannot set the cred token more than once"});return this.credentials=e,this}withDataTransferMode(e){if(this.withDataTransferModeCalled)throw new i({source:this.constructor.name,message:"Cannot set the data loading mode more than once"});return this.theDataTransferMode=e,this.withDataTransferModeCalled=!0,this}withInferenceConfig(e){if(null!==this.inferenceConfig)throw new i({source:this.constructor.name,message:"Cannot set the Inference Config more than once"});return this.inferenceConfig=e,this}withModel(e){if(null!==this.theModel)throw new i({source:this.constructor.name,message:"Cannot set the model because a model or an endpoint has already been set"});return this.theModel=e,this}withRegion(e){if(null!==this.region)throw new i({source:this.constructor.name,message:"Cannot set the endpoint because a model or an endpoint has already been set"});return this.region=e,this}}const x=()=>new g;export{x as createChatAdapter};
