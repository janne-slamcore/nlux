import{createChatAdapter as e}from"@nlux/hf";export{createChatAdapter,llama2InputPreProcessor,llama2OutputPreProcessor}from"@nlux/hf";import{useState as t,useEffect as o}from"react";var r=Object.defineProperty,s=(e,t,o)=>((e,t,o)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[t]=o)(e,"symbol"!=typeof t?t+"":t,o);class a extends Error{constructor(e={}){super(e.message),s(this,"exceptionId"),s(this,"message"),s(this,"source"),s(this,"type"),this.message=e.message??"",this.source=e.source,this.type=this.constructor.name,this.exceptionId=e.exceptionId}}class n extends a{}const i="hooks/getAdapterBuilder",u=r=>{if(!r.model)throw new Error("You must provide either a model or an endpoint to use Hugging Face Inference API.");const[s,a]=t(!1),[u]=t((t=>{const{model:o,authToken:r,dataTransferMode:s,preProcessors:a,maxNewTokens:u,systemMessage:c}=t||{};if(s&&"stream"!==s&&"batch"!==s)throw new n({source:i,message:'Data transfer mode for Hugging Face Inference API must be either "stream" or "batch"'});if(void 0===o)throw new n({source:i,message:"You must provide either a model or an endpoint to use Hugging Face Inference API."});let d=e().withModel(o);return void 0!==r&&(d=d.withAuthToken(r)),void 0!==s&&(d=d.withDataTransferMode(s)),void 0!==a?.input&&(d=d.withInputPreProcessor(a.input)),void 0!==a?.output&&(d=d.withOutputPreProcessor(a?.output)),void 0!==c&&(d=d.withSystemMessage(c)),void 0!==u&&(d=d.withMaxNewTokens(u)),d})(r).create()),{authToken:c,dataTransferMode:d,model:m,systemMessage:h,preProcessors:{input:p,output:l}={},maxNewTokens:g}=r||{};return o(()=>{s||a(!0)},[c,d,m,h,p,l,g]),u};export{u as useChatAdapter};
